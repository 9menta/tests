-- Services
local players = game:GetService("Players")
local tweenService = game:GetService("TweenService")
local uis = game:GetService("UserInputService")
local runService = game:GetService("RunService")
local coreGui = game:GetService("CoreGui")

-- Vars
local viewport = workspace.CurrentCamera.ViewportSize
local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)

local Library = {}

function Library:validate(defaults, options)
    for i, v in pairs(defaults) do
        if options[i] == nil then
            options[i] = v
        end
    end
    return options
end

function Library:tween(object, goal, callback)
    local tween = tweenService:Create(object, tweenInfo, goal)
    tween.Completed:Connect(callback or function() end)
    tween:Play()
end

function Library:Init(options)
    options = Library:validate({
        name = "Elixir Library Test"
    }, options or {}) -- if options == nil then give table otherwise give options // no caso caso você não configure as opções será fornecido as opções padrão
    
    local GUI = {
        CurrentTab = nil
    }
    
    -- ElixirLibary - O formato da Ui resumo o quadrado dela
    
    do
        -- StarterGui.ElixirLibary
        GUI["1"] = Instance.new("ScreenGui", runService:IsStudio() and players.LocalPlayer:WaitForChild("PlayerGui") or coreGui);
        GUI["1"]["Name"] = [[ElixirLibary]];
        GUI["1"]["IgnoreGuiInset"] = true
        
        -- StarterGui.ElixirLibary.main
        GUI["2"] = Instance.new("Frame", GUI["1"]);
        GUI["2"]["BorderSizePixel"] = 0;
        GUI["2"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
        GUI["2"]["AnchorPoint"] = Vector2.new(0, 0);
        GUI["2"]["Size"] = UDim2.new(0, 425, 0, 304);
        GUI["2"]["Position"] = UDim2.fromOffset((viewport.X/2) - (GUI["2"].Size.X.Offset / 2), (viewport.Y/2) - (GUI["2"].Size.Y.Offset / 2));
        GUI["2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
        GUI["2"]["Name"] = [[main]];
        
        -- StarterGui.ElixirLibary.main.UICorner
        GUI["3"] = Instance.new("UICorner", GUI["2"]);
        GUI["3"]["CornerRadius"] = UDim.new(0, 10);
    end
    
    
    -- DropShadow - Sombra em Volta da Ui
    
    do
        -- StarterGui.ElixirLibary.main.DropShadowHolder
        GUI["4"] = Instance.new("Frame", GUI["2"]);
        GUI["4"]["ZIndex"] = 0;
        GUI["4"]["BorderSizePixel"] = 0;
        GUI["4"]["Size"] = UDim2.new(1, 0, 1, 0);
        GUI["4"]["Name"] = [[DropShadowHolder]];
        GUI["4"]["BackgroundTransparency"] = 1;
        
        -- StarterGui.ElixirLibary.main.DropShadowHolder.DropShadow
        GUI["5"] = Instance.new("ImageLabel", GUI["4"]);
        GUI["5"]["ZIndex"] = 0;
        GUI["5"]["BorderSizePixel"] = 0;
        GUI["5"]["SliceCenter"] = Rect.new(49, 49, 450, 450);
        GUI["5"]["ScaleType"] = Enum.ScaleType.Slice;
        GUI["5"]["ImageTransparency"] = 0.5;
        GUI["5"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
        GUI["5"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
        GUI["5"]["Image"] = [[rbxassetid://6014261993]];
        GUI["5"]["Size"] = UDim2.new(1, 47, 1, 47);
        GUI["5"]["BackgroundTransparency"] = 1;
        GUI["5"]["Name"] = [[DropShadow]];
        GUI["5"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
    end
    
    
    -- TopBar - Barra da parte de cima da Ui
    
    do
        -- StarterGui.ElixirLibary.main.TopBar
        GUI["6"] = Instance.new("Frame", GUI["2"]);
        GUI["6"]["BorderSizePixel"] = 0;
        GUI["6"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
        GUI["6"]["Size"] = UDim2.new(1, 0, 0, 25);
        GUI["6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
        GUI["6"]["Name"] = [[TopBar]];
        GUI["6"]["BackgroundTransparency"] = 0.5;
        
        
        -- StarterGui.ElixirLibary.main.TopBar.UICorner
        GUI["7"] = Instance.new("UICorner", GUI["6"]);
        GUI["7"]["CornerRadius"] = UDim.new(0, 10);
        
        
        -- StarterGui.ElixirLibary.main.TopBar.Extension
        GUI["8"] = Instance.new("Frame", GUI["6"]);
        GUI["8"]["BorderSizePixel"] = 0;
        GUI["8"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
        GUI["8"]["AnchorPoint"] = Vector2.new(0, 1);
        GUI["8"]["Size"] = UDim2.new(1, 0, 0.5, 0);
        GUI["8"]["Position"] = UDim2.new(0, 0, 1, 0);
        GUI["8"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
        GUI["8"]["Name"] = [[Extension]];
        GUI["8"]["BackgroundTransparency"] = 0.8;
        
        
        -- StarterGui.ElixirLibary.main.TopBar.Title
        GUI["9"] = Instance.new("TextLabel", GUI["6"]);
        GUI["9"]["TextWrapped"] = true;
        GUI["9"]["TextStrokeTransparency"] = 10;
        GUI["9"]["BorderSizePixel"] = 0;
        GUI["9"]["TextXAlignment"] = Enum.TextXAlignment.Left;
        GUI["9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
        GUI["9"]["TextSize"] = 16;
        GUI["9"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
        GUI["9"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
        GUI["9"]["BackgroundTransparency"] = 1;
        GUI["9"]["Size"] = UDim2.new(0.5, 0, 1, 0);
        GUI["9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
        GUI["9"]["Text"] = options["name"];
        GUI["9"]["Name"] = options["name"];
        GUI["9"]["Position"] = UDim2.new(0, 25, 0, 0);
        
        
        -- StarterGui.ElixirLibary.main.TopBar.Title.UIPadding
        GUI["a"] = Instance.new("UIPadding", GUI["9"]);
        GUI["a"]["PaddingTop"] = UDim.new(0, 1);
        GUI["a"]["PaddingLeft"] = UDim.new(0, 8);
        
        
        -- StarterGui.ElixirLibary.main.TopBar.Close
        GUI["b"] = Instance.new("ImageLabel", GUI["6"]);
        GUI["b"]["BorderSizePixel"] = 0;
        GUI["b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
        GUI["b"]["ImageColor3"] = Color3.fromRGB(171, 0, 0);
        GUI["b"]["AnchorPoint"] = Vector2.new(1, 0.2);
        GUI["b"]["Image"] = [[rbxassetid://97035610866409]];
        GUI["b"]["Size"] = UDim2.new(0, 15, 0, 15);
        GUI["b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
        GUI["b"]["BackgroundTransparency"] = 1;
        GUI["b"]["Name"] = [[Close]];
        GUI["b"]["Position"] = UDim2.new(1, -4, 0, 9);
        
        
        -- StarterGui.ElixirLibary.main.TopBar.Line 1
        GUI["c"] = Instance.new("Frame", GUI["6"]);
        GUI["c"]["BorderSizePixel"] = 0;
        GUI["c"]["BackgroundColor3"] = Color3.fromRGB(100, 0, 149);
        GUI["c"]["AnchorPoint"] = Vector2.new(0, 1);
        GUI["c"]["Size"] = UDim2.new(1, 0, 0, 1);
        GUI["c"]["Position"] = UDim2.new(0, 0, 1, 0);
        GUI["c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
        GUI["c"]["Name"] = [[Line 1]];
        
        
        -- StarterGui.ElixirLibary.main.TopBar.Minimize
        GUI["d"] = Instance.new("ImageLabel", GUI["6"]);
        GUI["d"]["BorderSizePixel"] = 0;
        GUI["d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
        GUI["d"]["ImageColor3"] = Color3.fromRGB(255, 255, 0);
        GUI["d"]["AnchorPoint"] = Vector2.new(1, 0.2);
        GUI["d"]["Image"] = [[rbxassetid://97035610866409]];
        GUI["d"]["Size"] = UDim2.new(0, 15, 0, 15);
        GUI["d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
        GUI["d"]["BackgroundTransparency"] = 1;
        GUI["d"]["Name"] = [[Minimize]];
        GUI["d"]["Position"] = UDim2.new(0.9, 22, 0, 9);
        
        
        -- StarterGui.ElixirLibary.main.TopBar.ElixirLogo
        GUI["e"] = Instance.new("ImageLabel", GUI["6"]);
        GUI["e"]["BorderSizePixel"] = 0;
        GUI["e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
        GUI["e"]["Image"] = [[rbxassetid://129554232001027]];
        GUI["e"]["Size"] = UDim2.new(0, 20, 0, 20);
        GUI["e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
        GUI["e"]["BackgroundTransparency"] = 1;
        GUI["e"]["Name"] = [[ElixirLogo]];
        GUI["e"]["Position"] = UDim2.new(0, 10, 0, 0);
    end
    
    -- Navigation that's the bar - Isso e a barra aquela que fica o botão de home e tals dentro da ui
    
    do
        -- StarterGui.ElixirLibary.main.Navigation
        GUI["f"] = Instance.new("Frame", GUI["2"]);
        GUI["f"]["BorderSizePixel"] = 0;
        GUI["f"]["BackgroundColor3"] = Color3.fromRGB(25, 2, 37);
        GUI["f"]["Size"] = UDim2.new(0, 120, 1, -25);
        GUI["f"]["Position"] = UDim2.new(0, 0, 0, 25);
        GUI["f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
        GUI["f"]["Name"] = [[Navigation]];
        
        
        -- StarterGui.ElixirLibary.main.Navigation.UICorner
        GUI["10"] = Instance.new("UICorner", GUI["f"]);
        GUI["10"]["CornerRadius"] = UDim.new(0, 10);
        
        
        -- StarterGui.ElixirLibary.main.Navigation.Hide
        GUI["11"] = Instance.new("Frame", GUI["f"]);
        GUI["11"]["BorderSizePixel"] = 0;
        GUI["11"]["BackgroundColor3"] = Color3.fromRGB(25, 2, 37);
        GUI["11"]["Size"] = UDim2.new(1, 0, 0, 20);
        GUI["11"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
        GUI["11"]["Name"] = [[Hide]];
        
        
        -- StarterGui.ElixirLibary.main.Navigation.Hide 2
        GUI["12"] = Instance.new("Frame", GUI["f"]);
        GUI["12"]["BorderSizePixel"] = 0;
        GUI["12"]["BackgroundColor3"] = Color3.fromRGB(25, 2, 37);
        GUI["12"]["AnchorPoint"] = Vector2.new(1, 0);
        GUI["12"]["Size"] = UDim2.new(0, 20, 1, 0);
        GUI["12"]["Position"] = UDim2.new(1, 0, 0, 0);
        GUI["12"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
        GUI["12"]["Name"] = [[Hide 2]];
        
        
        -- StarterGui.ElixirLibary.main.Navigation.ButtonHolder
        GUI["13"] = Instance.new("Frame", GUI["f"]);
        GUI["13"]["BorderSizePixel"] = 0;
        GUI["13"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
        GUI["13"]["Size"] = UDim2.new(1, 0, 1, 0);
        GUI["13"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
        GUI["13"]["Name"] = [[ButtonHolder]];
        GUI["13"]["BackgroundTransparency"] = 1;
        
        
        -- StarterGui.ElixirLibary.main.Navigation.ButtonHolder.UIPadding
        GUI["14"] = Instance.new("UIPadding", GUI["13"]);
        GUI["14"]["PaddingTop"] = UDim.new(0, 8);
        GUI["14"]["PaddingRight"] = UDim.new(0, 5);
        GUI["14"]["PaddingLeft"] = UDim.new(0, 5);
        GUI["14"]["PaddingBottom"] = UDim.new(0, 8);
        
        
        -- StarterGui.ElixirLibary.main.Navigation.ButtonHolder.UIListLayout
        GUI["15"] = Instance.new("UIListLayout", GUI["13"]);
        GUI["15"]["Padding"] = UDim.new(0, 6);
        GUI["15"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
        
        
        -- StarterGui.ElixirLibary.main.Navigation.Line
        GUI["20"] = Instance.new("Frame", GUI["f"]);
        GUI["20"]["BorderSizePixel"] = 0;
        GUI["20"]["BackgroundColor3"] = Color3.fromRGB(100, 0, 149);
        GUI["20"]["Size"] = UDim2.new(0, 1, 1, 0);
        GUI["20"]["Position"] = UDim2.new(1, 0, 0, 0);
        GUI["20"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
        GUI["20"]["Name"] = [[Line]];
    end
    
    -- Container This is the content of what you get when you click on a navigation button - Isso e as coisas que você tem quando clica em um botão da navegação
    
    do
        -- StarterGui.ElixirLibary.main.ContentContainer
        GUI["21"] = Instance.new("Frame", GUI["2"]);
        GUI["21"]["BorderSizePixel"] = 0;
        GUI["21"]["BackgroundColor3"] = Color3.fromRGB(27, 27, 27);
        GUI["21"]["AnchorPoint"] = Vector2.new(1, 0);
        GUI["21"]["Size"] = UDim2.new(1, -132, 1, -37);
        GUI["21"]["Position"] = UDim2.new(1, -6, 0, 31);
        GUI["21"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
        GUI["21"]["Name"] = [[ContentContainer]];
        GUI["21"]["BackgroundTransparency"] = 1;
    end
    
    function GUI:Tab(options)
        options = Library:validate({
            name = "Preview Tab",
            icon = "rbxassetid://90095205604357"
        }, options or {})
        
        local Tab = {
            Hover = false,
            Active = false,
            Elements = {} -- Para armazenar elementos do tab
        }
        
        -- Render // Renderização
        
        do
            -- StarterGui.ElixirLibary.main.Navigation.ButtonHolder.Inactive
            Tab["1b"] = Instance.new("TextLabel", GUI["13"]);
            Tab["1b"]["BorderSizePixel"] = 0;
            Tab["1b"]["TextXAlignment"] = Enum.TextXAlignment.Left;
            Tab["1b"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
            Tab["1b"]["TextSize"] = 12;
            Tab["1b"]["FontFace"] = Font.new([[rbxasset://fonts/families/Ubuntu.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
            Tab["1b"]["TextColor3"] = Color3.fromRGB(157, 157, 157);
            Tab["1b"]["BackgroundTransparency"] = 0.45;
            Tab["1b"]["Size"] = UDim2.new(1, 0, 0, 24);
            Tab["1b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
            Tab["1b"]["Text"] = options.name;
            Tab["1b"]["Name"] = [[Inactive]];
            
            
            -- StarterGui.ElixirLibary.main.Navigation.ButtonHolder.Inactive.UIPadding
            Tab["1c"] = Instance.new("UIPadding", Tab["1b"]);
            Tab["1c"]["PaddingLeft"] = UDim.new(0, 26);
            
            
            -- StarterGui.ElixirLibary.main.Navigation.ButtonHolder.Inactive.Icon Home
            Tab["1d"] = Instance.new("ImageLabel", Tab["1b"]);
            Tab["1d"]["BorderSizePixel"] = 0;
            Tab["1d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
            Tab["1d"]["ImageTransparency"] = 0.5;
            Tab["1d"]["AnchorPoint"] = Vector2.new(0, 0.5);
            Tab["1d"]["Image"] = options.icon;
            Tab["1d"]["Size"] = UDim2.new(0, 18, 0, 18);
            Tab["1d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
            Tab["1d"]["BackgroundTransparency"] = 1;
            Tab["1d"]["Name"] = [[Icon Home]];
            Tab["1d"]["Position"] = UDim2.new(0, -21, 0.5, 0);
            
            
            -- StarterGui.ElixirLibary.main.Navigation.ButtonHolder.Inactive.UICorner
            Tab["1e"] = Instance.new("UICorner", Tab["1b"]);
            
            
            
            -- StarterGui.ElixirLibary.main.Navigation.ButtonHolder.Inactive.UIStroke
            Tab["1f"] = Instance.new("UIStroke", Tab["1b"]);
            Tab["1f"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
            Tab["1f"]["Color"] = Color3.fromRGB(100, 0, 149);
            
            -- StarterGUI.ElixirLibary.main.ContentContainer.HomeTab 2
            Tab["23"] = Instance.new("ScrollingFrame", Tab["21"]);
            Tab["23"]["BorderSizePixel"] = 0;
            Tab["23"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
            Tab["23"]["Name"] = [[HomeTab 2]];
            Tab["23"]["ScrollBarImageTransparency"] = 1;
            Tab["23"]["Selectable"] = false;
            Tab["23"]["Size"] = UDim2.new(1, 0, 1, 0);
            Tab["23"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
            Tab["23"]["ScrollBarThickness"] = 0;
            Tab["23"]["BackgroundTransparency"] = false;
            Tab["23"]["Visible"] = false;
        end
        
        -- Methods // Metodos
        
        function Tab:Activate()
            if not Tab.Active then
                if GUI.CurrentTab ~= nil then
                    GUI.CurrentTab:Deactivate()
                end
                
                Tab.Active = true
                Library:tween(Tab["1b"], {BackgroundTransparency = 0.8})
                Library:tween(Tab["1b"], {TextColor3 = Color3.fromRGB(255, 255, 255)})
                Library:tween(Tab["1d"], {ImageColor3 = Color3.fromRGB(255, 255, 255)})
                Tab["23"].Visible = true
                
                GUI.CurrentTab = Tab
            end
        end
        
        function Tab:Deactivate()
            if Tab.Active then
                Tab.Active = false
                Tab.Hover = false
                Library:tween(Tab["1b"], {TextColor3 = Color3.fromRGB(200, 200, 200)})
                Library:tween(Tab["1d"], {ImageColor3 = Color3.fromRGB(200, 200, 200)})
                Library:tween(Tab["1b"], {BackgroundTransparency = 1})
                Tab["23"].Visible = false
            end
        end
        
        -- Logic // Logica
        
        do 
            Tab["1b"].MouseEnter:Connect(function()
                Tab.Hover = true
                
                if not Tab.Active then
                    Library:tween(Tab["1b"], {TextColor3 = Color3.fromRGB(255, 255, 255)})
                    Library:tween(Tab["1d"], {ImageColor3 = Color3.fromRGB(255, 255, 255)})
                end
            end)
            
            Tab["1b"].MouseLeave:Connect(function()
                Tab.Hover = false
                
                if not Tab.Active then
                    Library:tween(Tab["1b"], {TextColor3 = Color3.fromRGB(200, 200, 200)})
                    Library:tween(Tab["1d"], {ImageColor3 = Color3.fromRGB(200, 200, 200)})
                end
            end)
            
            uis.InputBegan:Connect(function(input, gpe)
                if gpe then return end
                
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    if Tab.Hover then 
                        Tab.Activate()
                    end
                end
            end)
            
            if GUI.CurrentTab == nil then
                Tab:Activate()
            end
        end
        
        -- Adicionar funções para elementos da UI
        function Tab:AddButton(options)
            options = Library:validate({
                name = "Button",
                callback = function() end
            }, options or {})
            
            local Button = {
                Hover = false,
                MouseDown = false
            }
            
            -- Renderização do botão
            do
                Button["1"] = Instance.new("Frame", Tab["23"])
                Button["1"].Name = "Button"
                Button["1"].BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                Button["1"].Size = UDim2.new(1, 0, 0, 30)
                
                -- UICorner
                Button["2"] = Instance.new("UICorner", Button["1"])
                
                -- UIStroke
                Button["3"] = Instance.new("UIStroke", Button["1"])
                Button["3"].ApplyStrokeMode = Enum.ApplyStrokeMode.Border
                Button["3"].Color = Color3.fromRGB(100, 0, 149)
                
                -- Text Label
                Button["4"] = Instance.new("TextLabel", Button["1"])
                Button["4"].BackgroundTransparency = 1
                Button["4"].Size = UDim2.new(1, -20, 1, 0)
                Button["4"].Text = options.name
                Button["4"].TextColor3 = Color3.fromRGB(255, 255, 255)
                Button["4"].TextSize = 14
                Button["4"].TextXAlignment = Enum.TextXAlignment.Left
                Button["4"].FontFace = Font.new("rbxasset://fonts/families/Ubuntu.json")
            end
            
            -- Lógica do botão
            do
                Button["1"].MouseEnter:Connect(function()
                    Button.Hover = true
                    Library:tween(Button["1"], {BackgroundColor3 = Color3.fromRGB(15, 15, 15)})
                end)
                
                Button["1"].MouseLeave:Connect(function()
                    Button.Hover = false
                    if not Button.MouseDown then
                        Library:tween(Button["1"], {BackgroundColor3 = Color3.fromRGB(0, 0, 0)})
                    end
                end)
                
                Button["1"].MouseButton1Down:Connect(function()
                    Button.MouseDown = true
                    Library:tween(Button["1"], {BackgroundColor3 = Color3.fromRGB(25, 25, 25)})
                    options.callback()
                end)
                
                Button["1"].MouseButton1Up:Connect(function()
                    Button.MouseDown = false
                    if Button.Hover then
                        Library:tween(Button["1"], {BackgroundColor3 = Color3.fromRGB(15, 15, 15)})
                    else
                        Library:tween(Button["1"], {BackgroundColor3 = Color3.fromRGB(0, 0, 0)})
                    end
                end)
            end
            
            table.insert(Tab.Elements, Button)
            return Button
        end
        
        function Tab:AddToggle(options)
            options = Library:validate({
                name = "Toggle",
                default = false,
                callback = function(value) end
            }, options or {})
            
            local Toggle = {
                Value = options.default,
                Hover = false
            }
            
            -- Renderização do toggle
            do
                Toggle["1"] = Instance.new("Frame", Tab["23"])
                Toggle["1"].Name = "Toggle"
                Toggle["1"].BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                Toggle["1"].Size = UDim2.new(1, 0, 0, 30)
                
                -- Adicionar elementos visuais do toggle (similar ao seu código fonte)
                -- ... (adicionar UICorner, UIStroke, etc.)
            end
            
            -- Lógica do toggle
            do
                Toggle["1"].MouseButton1Click:Connect(function()
                    Toggle.Value = not Toggle.Value
                    Library:tween(Toggle.CheckmarkHolder, {BackgroundColor3 = Toggle.Value and Color3.fromRGB(86, 0, 128) or Color3.fromRGB(32, 32, 32)})
                    Library:tween(Toggle.Checkmark, {ImageTransparency = Toggle.Value and 0 or 1})
                    options.callback(Toggle.Value)
                end)
            end
            
            table.insert(Tab.Elements, Toggle)
            return Toggle
        end
        
        return Tab
    end
    
    -- Tornar a UI móvel
    do
        local dragging = false
        local dragInput, mousePos, framePos

        GUI["2"].InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                mousePos = input.Position
                framePos = GUI["2"].Position
            end
        end)

        GUI["2"].InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = false
            end
        end)

        GUI["2"].InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                if dragging then
                    local delta = input.Position - mousePos
                    GUI["2"].Position = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
                end
            end
        end)
    end
    
    return Library
end

-- options modify // opções na ui que podem ser modificadas

local main = Library:Init {
    name = "custom name"
}

local tab = main:CreateTab()
local tab1 = main:CreateTab({name="key"})
