-- Services
local players = game:GetService("Players")
local tweenService = game:GetService("TweenService")
local uis = game:GetService("UserInputService")
local runService = game:GetService("RunService")
local coreGui = game:GetService("CoreGui")

-- Vars
local viewport = workspace.CurrentCamera.ViewportSize
local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)

local Library = {}

function Library:validate(defaults, options)
    for i, v in pairs(defaults) do
        if options[i] == nil then
            options[i] = v
        end
    end
    return options
end

function Library:tween(object, goal, callback)
    local tween = tweenService:Create(object, tweenInfo, goal)
    tween.Completed:Connect(callback or function() end)
    tween:Play()
end

function Library:Init(options)
    options = Library:validate({
        name = "Elixir Library"
    }, options or {})
    
    local GUI = {
        CurrentTab = nil,
        Minimized = false
    }
    
    -- Main Frame
    do
        GUI["1"] = Instance.new("ScreenGui", runService:IsStudio() and players.LocalPlayer:WaitForChild("PlayerGui") or coreGui)
        GUI["1"].Name = "ElixirLibrary"
        GUI["1"].IgnoreGuiInset = true
        
        GUI["2"] = Instance.new("Frame", GUI["1"])
        GUI["2"].Name = "Main"
        GUI["2"].BackgroundColor3 = Color3.fromRGB(21, 21, 21)
        GUI["2"].BorderSizePixel = 0
        GUI["2"].Position = UDim2.fromOffset((viewport.X/2) - 212, (viewport.Y/2) - 152)
        GUI["2"].Size = UDim2.new(0, 425, 0, 304)
        
        -- Corner & Shadow
        GUI["3"] = Instance.new("UICorner", GUI["2"])
        GUI["3"].CornerRadius = UDim.new(0, 10)
        
        local shadow = Instance.new("ImageLabel", GUI["2"])
        shadow.Name = "Shadow"
        shadow.AnchorPoint = Vector2.new(0.5, 0.5)
        shadow.BackgroundTransparency = 1
        shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
        shadow.Size = UDim2.new(1, 47, 1, 47)
        shadow.ZIndex = 0
        shadow.Image = "rbxassetid://6014261993"
        shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
        shadow.ImageTransparency = 0.5
        shadow.ScaleType = Enum.ScaleType.Slice
        shadow.SliceCenter = Rect.new(49, 49, 450, 450)
    end
    
    -- TopBar
    do
        local topBar = Instance.new("Frame", GUI["2"])
        topBar.Name = "TopBar"
        topBar.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        topBar.BackgroundTransparency = 0.5
        topBar.BorderSizePixel = 0
        topBar.Size = UDim2.new(1, 0, 0, 25)
        
        local corner = Instance.new("UICorner", topBar)
        corner.CornerRadius = UDim.new(0, 10)
        
        local title = Instance.new("TextLabel", topBar)
        title.Name = "Title"
        title.BackgroundTransparency = 1
        title.Position = UDim2.new(0, 25, 0, 0)
        title.Size = UDim2.new(0.5, 0, 1, 0)
        title.Font = Font.new("rbxasset://fonts/families/GothamSSm.json")
        title.Text = options.name
        title.TextColor3 = Color3.fromRGB(255, 255, 255)
        title.TextSize = 16
        title.TextXAlignment = Enum.TextXAlignment.Left
        
        -- Close Button
        local closeBtn = Instance.new("ImageButton", topBar)
        closeBtn.Name = "Close"
        closeBtn.BackgroundTransparency = 1
        closeBtn.Position = UDim2.new(1, -25, 0, 5)
        closeBtn.Size = UDim2.new(0, 15, 0, 15)
        closeBtn.Image = "rbxassetid://10734898"
        closeBtn.ImageColor3 = Color3.fromRGB(255, 0, 0)
        
        closeBtn.MouseButton1Click:Connect(function()
            GUI["1"]:Destroy()
        end)
        
        -- Minimize Button
        local minBtn = Instance.new("ImageButton", topBar)
        minBtn.Name = "Minimize"
        minBtn.BackgroundTransparency = 1
        minBtn.Position = UDim2.new(1, -45, 0, 5)
        minBtn.Size = UDim2.new(0, 15, 0, 15)
        minBtn.Image = "rbxassetid://10734898"
        minBtn.ImageColor3 = Color3.fromRGB(255, 255, 0)
        
        minBtn.MouseButton1Click:Connect(function()
            GUI.Minimized = not GUI.Minimized
            if GUI.Minimized then
                Library:tween(GUI["2"], {Size = UDim2.new(0, 425, 0, 25)})
            else
                Library:tween(GUI["2"], {Size = UDim2.new(0, 425, 0, 304)})
            end
        end)
    end
    
    -- Navigation
    do
        local nav = Instance.new("Frame", GUI["2"])
        nav.Name = "Navigation"
        nav.BackgroundColor3 = Color3.fromRGB(25, 2, 37)
        nav.BorderSizePixel = 0
        nav.Position = UDim2.new(0, 0, 0, 25)
        nav.Size = UDim2.new(0, 120, 1, -25)
        
        local corner = Instance.new("UICorner", nav)
        corner.CornerRadius = UDim.new(0, 10)
        
        local buttonHolder = Instance.new("ScrollingFrame", nav)
        buttonHolder.Name = "ButtonHolder"
        buttonHolder.BackgroundTransparency = 1
        buttonHolder.Size = UDim2.new(1, 0, 1, 0)
        buttonHolder.CanvasSize = UDim2.new(0, 0, 0, 0)
        buttonHolder.ScrollBarThickness = 0
        buttonHolder.AutomaticCanvasSize = Enum.AutomaticSize.Y
        
        local listLayout = Instance.new("UIListLayout", buttonHolder)
        listLayout.Padding = UDim.new(0, 5)
        listLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        
        local padding = Instance.new("UIPadding", buttonHolder)
        padding.PaddingTop = UDim.new(0, 8)
        padding.PaddingBottom = UDim.new(0, 8)
    end
    
    -- Content Container
    do
        local container = Instance.new("Frame", GUI["2"])
        container.Name = "ContentContainer"
        container.BackgroundTransparency = 1
        container.Position = UDim2.new(0, 125, 0, 30)
        container.Size = UDim2.new(1, -130, 1, -35)
    end
    
    -- Tab System
    function GUI:CreateTab(options)
        options = Library:validate({
            name = "New Tab",
            icon = "rbxassetid://10734898"
        }, options or {})
        
        local Tab = {
            Hover = false,
            Active = false
        }
        
        -- Tab Button
        do
            Tab.Button = Instance.new("TextButton", GUI["2"].Navigation.ButtonHolder)
            Tab.Button.Name = options.name
            Tab.Button.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            Tab.Button.BackgroundTransparency = 0.45
            Tab.Button.Size = UDim2.new(0.9, 0, 0, 24)
            Tab.Button.Font = Font.new("rbxasset://fonts/families/Ubuntu.json")
            Tab.Button.Text = options.name
            Tab.Button.TextColor3 = Color3.fromRGB(157, 157, 157)
            Tab.Button.TextSize = 12
            Tab.Button.TextXAlignment = Enum.TextXAlignment.Left
            
            local corner = Instance.new("UICorner", Tab.Button)
            local stroke = Instance.new("UIStroke", Tab.Button)
            stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
            stroke.Color = Color3.fromRGB(100, 0, 149)
            
            local icon = Instance.new("ImageLabel", Tab.Button)
            icon.Name = "Icon"
            icon.BackgroundTransparency = 1
            icon.Position = UDim2.new(0, 5, 0.5, -9)
            icon.Size = UDim2.new(0, 18, 0, 18)
            icon.Image = options.icon
            icon.ImageColor3 = Color3.fromRGB(157, 157, 157)
        end
        
        -- Tab Container
        do
            Tab.Container = Instance.new("ScrollingFrame", GUI["2"].ContentContainer)
            Tab.Container.Name = options.name.."Container"
            Tab.Container.BackgroundTransparency = 1
            Tab.Container.Size = UDim2.new(1, 0, 1, 0)
            Tab.Container.CanvasSize = UDim2.new(0, 0, 0, 0)
            Tab.Container.ScrollBarThickness = 2
            Tab.Container.Visible = false
            Tab.Container.AutomaticCanvasSize = Enum.AutomaticSize.Y
            
            local listLayout = Instance.new("UIListLayout", Tab.Container)
            listLayout.Padding = UDim.new(0, 5)
            listLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
            
            local padding = Instance.new("UIPadding", Tab.Container)
            padding.PaddingTop = UDim.new(0, 5)
            padding.PaddingBottom = UDim.new(0, 5)
            padding.PaddingLeft = UDim.new(0, 5)
            padding.PaddingRight = UDim.new(0, 5)
        end
        
        -- Tab Functions
        function Tab:Activate()
            if GUI.CurrentTab then
                GUI.CurrentTab:Deactivate()
            end
            
            Tab.Active = true
            Tab.Container.Visible = true
            Library:tween(Tab.Button, {BackgroundTransparency = 0.8})
            Library:tween(Tab.Button, {TextColor3 = Color3.fromRGB(255, 255, 255)})
            Library:tween(Tab.Button.Icon, {ImageColor3 = Color3.fromRGB(255, 255, 255)})
            
            GUI.CurrentTab = Tab
        end
        
        function Tab:Deactivate()
            Tab.Active = false
            Tab.Container.Visible = false
            Library:tween(Tab.Button, {BackgroundTransparency = 0.45})
            Library:tween(Tab.Button, {TextColor3 = Color3.fromRGB(157, 157, 157)})
            Library:tween(Tab.Button.Icon, {ImageColor3 = Color3.fromRGB(157, 157, 157)})
        end
        
        -- Elements
        function Tab:AddButton(options)
            options = Library:validate({
                name = "Button",
                callback = function() end
            }, options or {})
            
            local Button = Instance.new("TextButton", Tab.Container)
            Button.Name = "Button"
            Button.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            Button.Size = UDim2.new(1, 0, 0, 30)
            Button.Font = Font.new("rbxasset://fonts/families/Ubuntu.json")
            Button.Text = options.name
            Button.TextColor3 = Color3.fromRGB(255, 255, 255)
            Button.TextSize = 14
            
            local corner = Instance.new("UICorner", Button)
            local stroke = Instance.new("UIStroke", Button)
            stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
            stroke.Color = Color3.fromRGB(100, 0, 149)
            
            Button.MouseButton1Click:Connect(options.callback)
            
            return Button
        end
        
        function Tab:AddToggle(options)
            options = Library:validate({
                name = "Toggle",
                default = false,
                callback = function(value) end
            }, options or {})
            
            local Toggle = {Value = options.default}
            
            Toggle.Button = Instance.new("TextButton", Tab.Container)
            Toggle.Button.Name = "Toggle"
            Toggle.Button.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            Toggle.Button.Size = UDim2.new(1, 0, 0, 30)
            Toggle.Button.Text = ""
            
            local corner = Instance.new("UICorner", Toggle.Button)
            local stroke = Instance.new("UIStroke", Toggle.Button)
            stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
            stroke.Color = Color3.fromRGB(100, 0, 149)
            
            local title = Instance.new("TextLabel", Toggle.Button)
            title.BackgroundTransparency = 1
            title.Size = UDim2.new(1, -50, 1, 0)
            title.Font = Font.new("rbxasset://fonts/families/Ubuntu.json")
            title.Text = options.name
            title.TextColor3 = Color3.fromRGB(255, 255, 255)
            title.TextSize = 14
            title.TextXAlignment = Enum.TextXAlignment.Left
            
            local indicator = Instance.new("Frame", Toggle.Button)
            indicator.Name = "Indicator"
            indicator.AnchorPoint = Vector2.new(1, 0.5)
            indicator.BackgroundColor3 = Toggle.Value and Color3.fromRGB(86, 0, 128) or Color3.fromRGB(32, 32, 32)
            indicator.Position = UDim2.new(1, -5, 0.5, 0)
            indicator.Size = UDim2.new(0, 40, 0, 20)
            
            local indicatorCorner = Instance.new("UICorner", indicator)
            indicatorCorner.CornerRadius = UDim.new(1, 0)
            
            local circle = Instance.new("Frame", indicator)
            circle.Name = "Circle"
            circle.AnchorPoint = Vector2.new(0, 0.5)
            circle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            circle.Position = Toggle.Value and UDim2.new(1, -18, 0.5, 0) or UDim2.new(0, 2, 0.5, 0)
            circle.Size = UDim2.new(0, 16, 0, 16)
            
            local circleCorner = Instance.new("UICorner", circle)
            circleCorner.CornerRadius = UDim.new(1, 0)
            
            Toggle.Button.MouseButton1Click:Connect(function()
                Toggle.Value = not Toggle.Value
                Library:tween(indicator, {BackgroundColor3 = Toggle.Value and Color3.fromRGB(86, 0, 128) or Color3.fromRGB(32, 32, 32)})
                Library:tween(circle, {Position = Toggle.Value and UDim2.new(1, -18, 0.5, 0) or UDim2.new(0, 2, 0.5, 0)})
                options.callback(Toggle.Value)
            end)
            
            return Toggle
        end
        
        -- Tab Button Logic
        Tab.Button.MouseButton1Click:Connect(function()
            Tab:Activate()
        end)
        
        if not GUI.CurrentTab then
            Tab:Activate()
        end
        
        return Tab
    end
    
    -- Make GUI Draggable
    do
        local dragging = false
        local dragInput, mousePos, framePos
        
        GUI["2"].InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                mousePos = input.Position
                framePos = GUI["2"].Position
                
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end)
            end
        end)
        
        GUI["2"].InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                dragInput = input
            end
        end)
        
        uis.InputChanged:Connect(function(input)
            if input == dragInput and dragging then
                local delta = input.Position - mousePos
                GUI["2"].Position = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
            end
        end)
    end
    
    return GUI
end

return Library
